# Copyright 2010 - 2013, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 

from os.path import basename

Import('env')

daemon_env = env.Clone()

vars = Variables()
vars.Add(EnumVariable('ICE', 'Enable ICE Transport', 'on', allowed_values=('on', 'off')))
if daemon_env['OS'] in ['linux', 'openwrt', 'android']:
    vars.Add(EnumVariable('BT', 'Enable Bluetooth Transport', 'on', allowed_values=('on', 'off')))
vars.Update(daemon_env)
Help(vars.GenerateHelpText(daemon_env))

if not daemon_env.has_key('ICE'):
    daemon_env['ICE'] = 'off'

if not daemon_env.has_key('BT'):
    daemon_env['BT'] = 'off'

if daemon_env['OS'] == 'android':
    # Android Dalvik code is tied to the hip of daemon for proximity scanner
    # functionality.  Let the build for Android know whether ICE support is
    # available or not.
    env['ANDROID_PROXIMITY'] = daemon_env['ICE']


if daemon_env['OS'] == "darwin":
    # Darwin has its own version of the daemon transport
    srcs = [ f for f in daemon_env.Glob('*.cc') + daemon_env.Glob('*.c') + [daemon_env['OS'] + '/DaemonTransport.cc']]
else:
    srcs = [ f for f in daemon_env.Glob('*.cc') + daemon_env.Glob('*.c') + [daemon_env['OS_GROUP'] + '/DaemonTransport.cc']]

if daemon_env['OS'] != "android":
    srcs += [daemon_env['OS_GROUP'] + '/PermissionMgr.cc']

daemon_env.Append(CPPPATH = [ daemon_env.Dir('..').srcnode(),
                              daemon_env.Dir('.').srcnode(),
                              daemon_env.Dir('$OS_GROUP').srcnode() ])

daemon_objs = daemon_env.Object(srcs)

daemon_objs.extend(daemon_env.SConscript('ns/SConscript', exports = ['daemon_env']))

# Add in P2P Helper support for Android only
if daemon_env['OS'] == "android":
    daemon_objs.extend(daemon_env.SConscript('android/SConscript', exports = ['daemon_env']))


if daemon_env['BT'] == 'on':
    daemon_env.Append(CPPDEFINES = ['AJ_ENABLE_BT'])
    daemon_env.Append(CPPPATH = [daemon_env.Dir('./bluetooth').srcnode()])
    bt_objs = daemon_env.SConscript('bluetooth/SConscript', exports = ['daemon_env'])
    daemon_objs.extend(bt_objs)

if daemon_env['ICE'] == 'on':
    daemon_env.Append(CPPDEFINES=['AJ_ENABLE_ICE'])
    daemon_env.Append(CPPPATH = [ daemon_env.Dir('./packetengine').srcnode(),
                                  daemon_env.Dir('./ice').srcnode() ])
    pe_objs = daemon_env.SConscript('packetengine/SConscript', exports = ['daemon_env'])
    ice_objs = daemon_env.SConscript('ice/SConscript', exports = ['daemon_env'])
    json_objs = daemon_env.SConscript('JSON/SConscript', exports = ['daemon_env'])
    daemon_objs.extend(pe_objs + ice_objs + json_objs)

# Bundled daemon object file
bdobj = daemon_env.SConscript('bundled/SConscript', exports = ['daemon_env'])

# AllJoyn Daemon
if daemon_env['OS_GROUP']=='winrt':
    Import('winrt_objs')
    daemon_objs.extend(winrt_objs + [bdobj])

progs, os_objs = daemon_env.SConscript('${OS_GROUP}/SConscript', exports=['daemon_env', 'daemon_objs'])

daemon_objs.extend(os_objs)

# Daemon library
if daemon_env['OS_GROUP'] != 'winrt':
    lib = daemon_env.StaticLibrary('ajdaemon', daemon_objs);
else:
    lib = []

# AllJoyn Daemon test programs
if daemon_env['OS_GROUP'] == 'winrt':
    tests = []
elif daemon_env['OS'] == 'darwin':
    if daemon_env['CPU'] in ['arm', 'armv7', 'armv7s']:
        print 'Not building unit tests for iOS...'    
        tests = []
    else:
        print 'Building unit tests for darwin...'
        tests = daemon_env.SConscript('test/SConscript', exports = ['daemon_env', 'daemon_objs'])
else:
    tests = daemon_env.SConscript('test/SConscript', exports = ['daemon_env', 'daemon_objs'])
    
# Return daemon and related tests
ret = progs + tests, lib, bdobj
Return('ret')
